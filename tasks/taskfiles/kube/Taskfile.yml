desc: Kind (kubernetes in docker) tasks
version: '3'
vars:
  LOCAL_BIN_PATH: '{{default "./.local/bin" .PROJECT_BIN_PATH}}'
  PROJECT_BIN_BASE_PATH:
    sh: "dirname {{.PROJECT_BIN_PATH}}"
  CONFIG_PATH: '{{default "{{.ROOT_PATH}}/config" .CONFIG_PATH}}'
  KUBECTL_VERSION: '{{default "1.20.1" .KUBECTL_VERSION}}'
  kubectl: '{{.PROJECT_BIN_PATH}}/kubectl'
  KUBECONFIG: '{{.PROJECT_BIN_BASE_PATH}}/kubeconfig'
  KUBE_DISTRIBUTION: '{{default "kind" .KUBE_DISTRIBUTION}}'

tasks:
  show:
    desc: Show terraform variables for this task
    silent: true
    cmds:
      - | 
        echo "PROJECT_BIN_BASE_PATH: {{.PROJECT_BIN_BASE_PATH}}"
        echo "KUBECTL_VERSION: {{.KUBECTL_VERSION}}"
        echo "KUBECONFIG: {{.KUBECONFIG}}"
        echo "KUBE_DISTRIBUTION: {{.KUBE_DISTRIBUTION}}"

  kubectl:install:
    desc: Install local kubectl binary
    silent: true
    cmds:
      - | 
        echo "Attempting to install kubectl - {{.KUBECTL_VERSION}}"
        mkdir -p {{.PROJECT_BIN_PATH}}
        curl --retry 3 --retry-delay 5 --fail -sSL -o {{.kubectl}} https://storage.googleapis.com/kubernetes-release/release/v{{.KUBECTL_VERSION}}/bin/{{OS}}/{{ARCH}}/kubectl
        chmod +x {{.kubectl}}
        echo "kubectl binary: {{.kubectl}}"
    status:
      - test -d {{.PROJECT_BIN_PATH}}
      - test -f {{.kubectl}}
      - |
        [[ $({{.kubectl}} version -json | grep -Eo '"gitVersion"[^,]*' | grep -Eo '[^:]*$' | tr -d '"' | tr -d ' ') == "v{{.KUBECTL_VERSION}}" ]]

  start:
    desc: Start a local kind cluster
    silent: true
    cmds:
      - | 
        {{.kind}} create cluster \
          --kubeconfig {{.KIND_KUBE_CONFIG}} \
          --config {{.KIND_CONFIG}} \
          --wait 90s

  install:ingress:nginx:
    desc: Install ingress to kube
    silent: true
    deps: [ kubectl:install ]
    cmds:
      - | 
        echo "Installing ingress controller.."
        {{.kubectl}} apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml || true
        {{.kubectl}} wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=90s || true

  stop:
    desc: Stop a local kind cluster
    silent: true
    cmds:
      - |
        {{.kind}} delete cluster

  export:
    desc: Extract a CA cert and JWT Reviewer token from kubeconfig
    silent: true
    cmds:
      - |
        echo "https://$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane):6443" > {{.PROJECT_BIN_BASE_PATH}}/kube_server.txt
        {{.kubectl}} --kubeconfig {{.KIND_KUBE_CONFIG}} \
          config view --raw -o=jsonpath='{.clusters[0].cluster.certificate-authority-data}' | base64 --decode > {{.PROJECT_BIN_BASE_PATH}}/kube_ca.pem
        $(MAKE) vault/token > {{.PROJECT_BIN_BASE_PATH}}/token_reviewer_jwt.txt

  # vault/cronjob:
  #   desc: Helm deploy the vault cronjob deployment
  #   silent: true
  #   cmds:
  #     - | 
  #       mkdir -p $(HELM_CACHE_HOME)
  #       echo "VAULT_ADDRESS: ${VAULT_ADDRESS}"
  #       {{.kubectl}} --kubeconfig {{.KIND_KUBE_CONFIG}} create ns $(VAULT_NS) || true
  #       {{.helm}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} upgrade -i \
  #         vault-integration {{.ROOT_PATH}}/charts/vault-integration \
  #         --set "default.cluster_id=kind" \
  #         --set "vault.owner=controller" \
  #         --set "vault.initEnabled=false" \
  #         --set "vault.namespace=$(VAULT_NS)" \
  #         --set "vault.image.repository=$(DOCKER_IMAGE)" \
  #         --set "vault.image.tag=local" \
  #         --set "vault.imagePullPolicy=Never" \
  #         --set "vault.address=http://$(VAULT_ADDRESS):8200" \
  #         --set "vault.kube_url=$(KUBE_URL)" \
  #         --set "vault.kv.path=controller/kv" \
  #         --set "vault.kv.secret=controller/kind/vault_auth" \
  #         --set "vault.auth_method=token" \
  #         --set "vault.token=root"
  #       $(MAKE) vault/token > {{.PROJECT_BIN_BASE_PATH}}/token_reviewer_jwt.txt

# vault/cronjob/run:
# desc: Create a new job from the cronjob and run it
#   {{.kubectl}} --kubeconfig {{.KIND_KUBE_CONFIG}} -n $(VAULT_NS) \
#     create job --from=cronjob/vault-integration-update vault-integration-manual-run || true

# vault/cronjob/template:
# desc: Helm template the vault cronjob deployment
#   {{.helm}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} template \
#     vault-integration {{.ROOT_PATH}}/charts/vault-integration \
#     --set "default.cluster_id=kind" \
#     --set "vault.owner=controller" \
#     --set "vault.initialize=false" \
#     --set "vault.namespace=$(VAULT_NS)" \
#     --set "vault.image.repository=$(DOCKER_IMAGE)" \
#     --set "vault.image.tag=local" \
#     --set "vault.imagePullPolicy=Never" \
#     --set "vault.address=http://$(VAULT_ADDRESS):8200" \
#     --set "vault.kube_url=$(KUBE_URL)" \
#     --set "vault.kv.path=controller/kv" \
#     --set "vault.kv.secret=controller/kind/vault_auth" \
#     --set "vault.auth_method=token" \
#     --set "vault.token=root"

# vault/certmanager:
# desc: Helm deploy the vault certmanager integration
#   mkdir -p $(HELM_CACHE_HOME)
#   echo "VAULT_ADDRESS: ${VAULT_ADDRESS}"
#   {{.kubectl}} --kubeconfig {{.KIND_KUBE_CONFIG}} \
#     create ns $(VAULT_CERTMANAGER_NS) 2> /dev/null || true
#   {{.helm}} -n $(VAULT_CERTMANAGER_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} upgrade -i \
#     vault-certmanager-integration {{.ROOT_PATH}}/charts/vault-integration \
#     --set "default.cluster_id=kind" \
#     --set "vault.environment=local" \
#     --set "vault.address=http://$(VAULT_ADDRESS):8200" \
#     --set "vault.isEnabled=false" \
#     --set "vault.initialize=false" \
#     --set "certmanager.enabled=true" \
#     --set "certmanager.auth=$(VAULT_CERTMANAGER_AUTH)" \
#     --set "certmanager.kubernetes.role=kubernetes_kind_cert-manager_cert-manager" \
#     --set "certmanager.kubernetes.secret=$(shell $(MAKE) lab/certmanager/sa/export)" \
#     --set "certmanager.pki.role=app1_issuer" \
#     --set "certmanager.pki.mount=pki/caint" \
#     --set 'certmanager.pki.caBundle=$(shell curl -s \
#       -X GET http://127.0.0.1:8200/v1/pki/caint/ca_chain \
#       -H "accept: */*" \
#       -H  "X-Vault-Token: ${VAULT_TOKEN}" | base64)' \
#     --set "certmanager.approle.role_id=$(shell $(MAKE) lab/app1/approle/role/export)" \
#     --set "certmanager.approle.role=app1_issuer" \
#     --set "certmanager.approle.secret=$(shell $(MAKE) lab/app1/approle/secret/export)"
# #--set "certmanager.pki.caBundle=$(shell cat ./.local/kube_ca.pem | base64)" \

# vault/certmanager/template:
# desc: Helm template the vault certmanager integration
#   {{.helm}} -n $(VAULT_CERTMANAGER_NS) template \
#     vault-certmanager-integration {{.ROOT_PATH}}/charts/vault-integration \
#     --set "default.cluster_id=kind" \
#     --set "vault.environment=local" \
#     --set "vault.address=http://$(VAULT_ADDRESS):8200" \
#     --set "vault.isEnabled=false" \
#     --set "vault.initialize=false" \
#     --set "certmanager.enabled=true" \
#     --set "certmanager.auth=$(VAULT_CERTMANAGER_AUTH)" \
#     --set "certmanager.kubernetes.role=kubernetes_kind_cert-manager_cert-manager" \
#     --set "certmanager.kubernetes.secret=$(shell $(MAKE) lab/certmanager/sa/export)" \
#     --set "certmanager.pki.role=app1_issuer" \
#     --set "certmanager.pki.mount=pki/caint" \
#     --set "certmanager.pki.caBundle=$(shell curl -s -X GET "http://127.0.0.1:8200/v1/pki/caint/ca_chain" -H  "accept: */*" -H  "X-Vault-Token: ${VAULT_TOKEN}" | base64)" \
#     --set "certmanager.approle.role_id=$(shell $(MAKE) lab/app1/approle/role/export)" \
#     --set "certmanager.approle.role=app1_issuer" \
#     --set "certmanager.approle.secret=$(shell $(MAKE) lab/app1/approle/secret/export)"

# vault/certmanager/status:
# desc: Validate cert-manager issuers
#   {{.kubectl}} -n $(VAULT_CERTMANAGER_NS) --kubeconfig {{.KIND_KUBE_CONFIG}}  get clusterissuers.cert-manager.io -o wide

# vault/rbac:
# desc: Configure kube with vault required rbac rules
#   {{.kubectl}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} apply --filename {{.ROOT_PATH}}/config/token-reviewer.yml

# vault/token/test:
# desc: Retrieves a reviewer token
#   {{.kubectl}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} get secret \
#   $({{.kubectl}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} get secrets --output=json | $(jq) -r '.items[].metadata | select(.name|startswith("vault-token-jwt-reviewer")).name')

# vault/token:
#   desc: Retrieves a reviewer token
#   {{.kubectl}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} \
#     get secret $(KUBE_SERVICE_ACCOUNT) \
#     --output='go-template={{ .data.token }}' | base64 --decode

# .vault/external:
#   desc: Configure kube to point to an external endpoint for vault
#   {{.kubectl}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} \
#   apply --filename {{.ROOT_PATH}}/config/external-vault.yml


  # helm/clean:
  #   desc: Clean up helm deployment cache
  #   silent: true
  #   cmds:
  #     - | 
  #       rm -rf {{.ROOT_PATH}}/.local/helm

  # helm/config:
  #   desc: Configure helm to access remote vault instance
  #   silent: true
  #   cmds:
  #     - | 
  #       mkdir -p $(HELM_CACHE_HOME)
  #       {{.helm}} repo add hashicorp https://helm.releases.hashicorp.com || true
  #       {{.helm}} repo update || true
  #       {{.kubectl}} --kubeconfig {{.KIND_KUBE_CONFIG}} \
  #         create ns $(VAULT_NS) || true
  #       {{.helm}} -n $(VAULT_NS) --kubeconfig {{.KIND_KUBE_CONFIG}} \
  #         upgrade -i vault hashicorp/vault \
  #         --set "server.enabled=false" \
  #         --set "server.readinessProbe.enabled=false" \
  #         --set "server.service.enabled=false" \
  #         --set "csi.enabled=false"

  status:
    desc: Show kubernetes status
    silent: true
    cmds:
      - | 
        {{.kubectl}} --kubeconfig {{.KIND_KUBE_CONFIG}} cluster-info

  info:
    desc: Some extra kube info
    silent: true
    cmds:
      - | 
        echo "VAULT_ADDRESS: ${VAULT_ADDRESS}"
        echo "KUBE_TOKEN: ${KUBE_TOKEN}"
        echo "KUBE_CA: ${KUBE_CA}"
        echo "KUBE_URL: ${KUBE_URL}"
        echo "KUBE_SERVICE_ACCOUNT: ${KUBE_SERVICE_ACCOUNT}"

  show:portforwards:
    desc: Show all kube port-forward ports
    silent: true
    cmds:
      - |
        {{.kubectl}} --kubeconfig {{.KIND_KUBE_CONFIG}} \
          get svc --all-namespaces \
          -o go-template='{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}-->{{.port}}{{"\n"}}{{end}}{{end}}{{end}}'

  # helm/export:
  #   desc: Export current helm vars to source in shell
  #   echo "export HELM_CACHE_HOME=$(HELM_CACHE_HOME)"
  #   echo "export HELM_CONFIG_HOME=$(HELM_CONFIG_HOME)"
  #   echo "export HELM_DATA_HOME=$(HELM_DATA_HOME)"
  #   echo "export KUBECONFIG={{.KIND_KUBE_CONFIG}}"
