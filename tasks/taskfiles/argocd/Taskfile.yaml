version: '3'
vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  INT_REGISTRY: registry.localhost
  PATH_ERROR: is not installed or correctly configured in PATH.
  ARGOCD_VERSION: 2.7.3
  GH_OWNER: zloeber
  GH_PUBLIC_DEPLOY_REPO: homelab
  GH_PRIVATE_DEPLOY_REPO: homelab-private
  DOCKER_REGISTRY: cloud.canister.io:5000
  ARGOCD_APPSET: appset1
  LOCAL_DOCKER_REGISTRY: registry.localhost:5001

#silent: true

tasks:
  secret:
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url | sed -e 's/:/\//g'| sed -e 's/ssh\/\/\///g'| sed -e 's/git@/https:\/\//g' | sed 's/.git$//'
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: private-repo-creds
        labels:
          argocd.argoproj.io/secret-type: repo-creds
      stringData:
        type: git
        url: {{.GIT_URI}}
        password: $GH_PASS
        username: $GH_USER
      EOF
    ignore_error: true

  secret:test:
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url | sed -e 's/:/\//g'| sed -e 's/ssh\/\/\///g'| sed -e 's/git@/https:\/\//g' | sed 's/.git$//'
    cmds:
    - |
      echo "GIT_URI: {{.GIT_URI}}"
      echo "GH_USER: ${GH_USER}"
      echo "GH_PASS: ${GH_PASS}"
    ignore_error: true

  repo:
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url | sed -e 's/:/\//g'| sed -e 's/ssh\/\/\///g'| sed -e 's/git@/https:\/\//g' | sed 's/.git$//'
    cmds:
    - rm config/repo.yaml
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: main-repository
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: https://github.com/{{.GH_OWNER}}/{{.GH_PUBLIC_DEPLOY_REPO}}.git
        password: $GH_PASS
        username: $GH_USER
      EOF
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: private-repository
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: https://github.com/{{.GH_OWNER}}/{{.GH_PRIVATE_DEPLOY_REPO}}.git
        password: $GH_PASS
        username: $GH_USER
      EOF
    ignore_error: true

  deploy:
    desc: Installs ArgoCD resources manually on the local cluster
    dir: "{{.ARGOCD_APPSET}}/argocd"
    preconditions:
    - sh: 'which kustomize'
      msg: 'kustomize {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - kubectl create namespace argocd
    - kustomize build | kubectl apply -f -
    - sleep 10
    - kustomize build | kubectl apply -f -
    - kubectl wait deploy/argocd-server -n argocd --for condition=available --timeout=600s
    - echo ""
    ignore_error: true

  build:
    cmds:
    - task: build:sidecar
    - task: push:sidecar

  build:sidecar:
    preconditions:
    - sh: 'which docker'
      msg: 'docker {{.PATH_ERROR}}'
    dir: "{{.ARGOCD_APPSET}}/argocd"
    cmds:
    - |
      docker build -t {{.DOCKER_REGISTRY}}/zloeber/argocd-sidecar:latest \
                   -t {{.DOCKER_REGISTRY}}/zloeber/argocd-sidecar:v{{.ARGOCD_VERSION}} \
                   -t {{.DOCKER_REGISTRY}}/zloeber/argocd:v{{.ARGOCD_VERSION}} \
                   -t {{.DOCKER_REGISTRY}}/zloeber/argocd:latest \
                   -t {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd-sidecar:latest \
                   -t {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd-sidecar:v{{.ARGOCD_VERSION}} \
                   -t {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd:v{{.ARGOCD_VERSION}} \
                   -t {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd:latest .
    ignore_error: true

  push:sidecar:
    dir: "{{.ARGOCD_APPSET}}/argocd"
    preconditions:
    - sh: 'which docker'
      msg: 'docker {{.PATH_ERROR}}'
    cmds:
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd-sidecar:latest
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd-sidecar:v{{.ARGOCD_VERSION}}
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd:latest
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd:v{{.ARGOCD_VERSION}}
    ignore_error: true

  push:sidecar:remote:
    dir: "{{.ARGOCD_APPSET}}/argocd"
    preconditions:
    - sh: 'which docker'
      msg: 'docker {{.PATH_ERROR}}'
    cmds:
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd-sidecar:latest
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd-sidecar:v{{.ARGOCD_VERSION}}
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd:latest
    - docker push {{.DOCKER_REGISTRY}}/zloeber/argocd:v{{.ARGOCD_VERSION}}
    ignore_error: true

  push:sidecar:local:
    dir: "{{.ARGOCD_APPSET}}/argocd"
    preconditions:
    - sh: 'which docker'
      msg: 'docker {{.PATH_ERROR}}'
    cmds:
    - docker push {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd-sidecar:latest 
    - docker push {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd-sidecar:v{{.ARGOCD_VERSION}}
    - docker push {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd:latest
    - docker push {{.LOCAL_DOCKER_REGISTRY}}/zloeber/argocd:v{{.ARGOCD_VERSION}}
    ignore_error: true
  rm:
    dir: "{{.ARGOCD_APPSET}}/argocd"
    preconditions:
    - sh: 'which kustomize'
      msg: 'kustomize {{.PATH_ERROR}}'
    cmds:
    - kustomize build | kubectl delete -f -
    ignore_error: true

  bridge: kubectl port-forward -n argocd svc/argocd-server 8832:80

  password:
    cmds:
    - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
    ignore_error: true

  password:token:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - |
      PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) \
      argocd login --insecure --username admin --password ${PASSWORD} $ARGOCD_URI
    - argocd account generate-token --account image-updater --id image-updater > config/argo-token.yaml

  password:update:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - |
      PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) \
      argocd login --insecure --username admin --password ${PASSWORD} $ARGOCD_URI
    - argocd account update-password

  login:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    cmds:
    - argocd login argo.loeber.live --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD

  refresh:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    cmds:
    - argocd app list -o name | xargs -I{} argocd app get --hard-refresh {}

  reset:
    cmds:
    - task: login
    - task: refresh

  autopilot:install:
    desc: Install argocd-autopilot cli tool
    cmds:
      - |
        VERSION=$(curl --silent "https://api.github.com/repos/argoproj-labs/argocd-autopilot/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
        curl -L --output - https://github.com/argoproj-labs/argocd-autopilot/releases/download/$VERSION/argocd-autopilot-linux-amd64.tar.gz | tar zx
        mv ./argocd-autopilot-* {{.LOCAL_BIN_PATH}}/argocd-autopilot
    status:
      - type argocd-autopilot &> /dev/null

  autopilot:bootstrap:
    desc: Bootstrap argocd cluster and git repo
    preconditions:
    - sh: 'which argocd-autopilot'
      msg: 'argocd-autopilot {{.PATH_ERROR}}'
    vars:
      GIT_REPO: https://github.com/zloeber/k3d-home-autopilot
    cmds:
      - |
        argocd-autopilot repo bootstrap --repo {{.GIT_REPO}}
